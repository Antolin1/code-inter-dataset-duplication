memorized
prediction:
compute the union size of two bitsets .
ground truth
compute the union size of two bitsets .

snippet
public static int unionSize(long[] x,long[] y){
  final int lx=x.length, ly=y.length;
  final int min=(lx < ly) ? lx : ly;
  int i=0, res=0;
  for (; i < min; i++) {
    res+=Long.bitCount(x[i] | y[i]);
  }
  for (; i < lx; i++) {
    res+=Long.bitCount(x[i]);
  }
  for (; i < ly; i++) {
    res+=Long.bitCount(y[i]);
  }
  return res;
}

------------------------------------------------------------------------------------------------------------------------------------------------------
memorized
prediction:
converts to object array .
ground truth
converts to object array .

snippet
public static Long[] valuesOf(long[] array){
  Long[] dest=new Long[array.length];
  for (int i=0; i < array.length; i++) {
    dest[i]=Long.valueOf(array[i]);
  }
  return dest;
}

------------------------------------------------------------------------------------------------------------------------------------------------------
memorized
prediction:
receive notification of the end of an element .
ground truth
receive notification of the end of an element .

snippet
public void endElement(String namespaceURI,String localName,String name) throws org.xml.sax.SAXException {
  if (m_inEntityRef)   return;
  m_prefixMap.popNamespaces(m_elemContext.m_currentElemDepth,null);
  try {
    final java.io.Writer writer=m_writer;
    if (m_elemContext.m_startTagOpen) {
      if (m_tracer != null)       super.fireStartElem(m_elemContext.m_elementName);
      int nAttrs=m_attributes.getLength();
      if (nAttrs > 0) {
        processAttributes(m_writer,nAttrs);
        m_attributes.clear();
      }
      if (m_spaceBeforeClose)       writer.write(" />");
 else       writer.write("/>");
    }
 else {
      if (m_cdataTagOpen)       closeCDATA();
      if (shouldIndent())       indent(m_elemContext.m_currentElemDepth - 1);
      writer.write('<');
      writer.write('/');
      writer.write(name);
      writer.write('>');
    }
  }
 catch (  IOException e) {
    throw new SAXException(e);
  }
  if (!m_elemContext.m_startTagOpen && m_doIndent) {
    m_ispreserve=m_preserves.isEmpty() ? false : m_preserves.pop();
  }
  m_isprevtext=false;
  if (m_tracer != null)   super.fireEndElem(name);
  m_elemContext=m_elemContext.m_prev;
}

------------------------------------------------------------------------------------------------------------------------------------------------------
memorized
prediction:
read a single character . this method will block until a character is available , an i / o error occurs , or the end of the stream is reached . < p / > < p > subclasses that intend to support efficient single - character input should override this method .
ground truth
read a single character . this method will block until a character is available , an i / o error occurs , or the end of the stream is reached . < p > subclasses that intend to support efficient single - character input should override this method .

snippet
public int read() throws IOException {
  int b0=fInputStream.read();
  if (b0 > 0x80) {
    throw new IOException(Localizer.getMessage("jsp.error.xml.invalidASCII",Integer.toString(b0)));
  }
  return b0;
}

------------------------------------------------------------------------------------------------------------------------------------------------------
memorized
prediction:
reads a xml element attribute ans cast it to a int value
ground truth
reads a xml element attribute ans cast it to a int value

snippet
public int toInt(Element el,String attributeName){
  return Caster.toIntValue(el.getAttribute(attributeName),Integer.MIN_VALUE);
}

------------------------------------------------------------------------------------------------------------------------------------------------------
memorized
prediction:
returns true if the input string contains a word .
ground truth
returns true if the input string contains a word - breaking character .

snippet
public boolean containsWordBreakingChar(final @NonNull CharSequence input){
  if (!TextUtils.isEmpty(input)) {
    for (int i=0; i < input.length(); i++) {
      char c=input.charAt(i);
      if (isWordBreakingChar(c)) {
        return true;
      }
    }
  }
  return false;
}

------------------------------------------------------------------------------------------------------------------------------------------------------
memorized
prediction:
process an attribute string of type t_char into a boolean value .
ground truth
process an attribute string of type t_yesno into a boolean value .

snippet
private Boolean processYESNO(StylesheetHandler handler,String uri,String name,String rawName,String value) throws org.xml.sax.SAXException {
  if (!(value.equals("yes") || value.equals("no"))) {
    handleError(handler,XSLTErrorResources.INVALID_BOOLEAN,new Object[]{name,value},null);
    return null;
  }
  return new Boolean(value.equals("yes") ? true : false);
}

------------------------------------------------------------------------------------------------------------------------------------------------------
memorized
prediction:
returns an enumeration of the additional measure names .
ground truth
returns an enumeration of the additional measure names

snippet
public Enumeration<String> enumerateMeasures(){
  Vector<String> newVector=new Vector<String>(1);
  newVector.addElement("measureNumIterations");
  return newVector.elements();
}

------------------------------------------------------------------------------------------------------------------------------------------------------
memorized
prediction:
removes the element at the specified position in this list . shifts any subsequent elements to the left ( subtracts one from their indices ) . returns the element that was removed from the list .
ground truth
removes the element at the specified position in this list . shifts any subsequent elements to the left ( subtracts one from their indices ) .

snippet
public E remove(int index){
  hashCodeUpToDate=false;
  modCount++;
  E oldValue=elementData(index);
  int numMoved=size - index - 1;
  if (numMoved > 0)   System.arraycopy(elementData,index + 1,elementData,index,numMoved);
  elementData[--size]=null;
  return oldValue;
}

------------------------------------------------------------------------------------------------------------------------------------------------------
partially memorized
prediction:
converts a hexadecimal character to a hexadecimal string .
ground truth
converts a hexadecimal character to an integer .

snippet
protected static int toDigit(final char ch,final int index) throws HexDecodeException {
  final int digit=Character.digit(ch,16);
  if (digit == -1) {
    throw new HexDecodeException("Illegal hexadecimal character " + ch + " at index "+ index);
  }
  return digit;
}

------------------------------------------------------------------------------------------------------------------------------------------------------
partially memorized
prediction:
creates a future that is completed with the given exception .
ground truth
returns a new completablefuture that is already exceptionally completed with the given exception .

snippet
public static <T>CompletableFuture<T> exceptionallyCompletedFuture(Throwable throwable){
  final CompletableFuture<T> future=new CompletableFuture<T>();
  future.completeExceptionally(throwable);
  return future;
}

------------------------------------------------------------------------------------------------------------------------------------------------------
partially memorized
prediction:
inserts a row into the buffer .
ground truth
inserts a new row into the block .

snippet
int insert(Row row,byte[] sourceBuffer,int sourceOffset,BlobOutputStream[] blobs){
  int rowHead=_rowHead;
  int blobTail=_blobTail;
  int rowLength=row.length();
  rowHead-=rowLength;
  if (rowHead < blobTail) {
    return -1;
  }
  byte[] buffer=_buffer;
  System.arraycopy(sourceBuffer,sourceOffset,buffer,rowHead,rowLength);
  buffer[rowHead]=(byte)((buffer[rowHead] & ~CODE_MASK) | INSERT);
  blobTail=row.insertBlobs(buffer,rowHead,blobTail,blobs);
  if (blobTail < 0) {
    return -1;
  }
  setBlobTail(blobTail);
  rowHead(rowHead);
  validateBlock(row);
  return rowHead;
}

------------------------------------------------------------------------------------------------------------------------------------------------------
partially memorized
prediction:
inserts all of the elements in the specified collection into this list , starting at the specified position . shifts the element currently at that position ( if any ) and any subsequent elements to the right ( increases their indices ) . the new elements will appear in this list in the order that they are returned by the specified collection ' s iterator .
ground truth
appends all of the elements in the specified collection to the end of this vector , in the order that they are returned by the specified collection ' s iterator . the behavior of this operation is undefined if the specified collection is modified while the operation is in progress . ( this implies that the behavior of this call is undefined if the specified collection is this vector , and this vector is nonempty . )

snippet
public synchronized boolean addAll(Collection<? extends E> c){
  modCount++;
  Object[] a=c.toArray();
  int numNew=a.length;
  ensureCapacityHelper(elementCount + numNew);
  System.arraycopy(a,0,elementData,elementCount,numNew);
  elementCount+=numNew;
  return numNew != 0;
}

------------------------------------------------------------------------------------------------------------------------------------------------------
partially memorized
prediction:
loads properties from a properties file .
ground truth
loads properties from a properties file on the local filesystem .

snippet
private static Properties loadProperties(String propertiesFile){
  Properties properties=new Properties();
  try (InputStream is=new FileInputStream(propertiesFile)){
    properties.load(is);
  }
 catch (  IOException e) {
    throw new RuntimeException("failed to load properties",e);
  }
  return properties;
}

------------------------------------------------------------------------------------------------------------------------------------------------------
partially memorized
prediction:
return a path for a path .
ground truth
return a path for a check mark .

snippet
public Shape createCheckMark(final int x,final int y,final int w,final int h){
  double xf=w / 12.0;
  double hf=h / 12.0;
  path.reset();
  path.moveTo(x,y + 7.0 * hf);
  path.lineTo(x + 2.0 * xf,y + 7.0 * hf);
  path.lineTo(x + 4.75 * xf,y + 10.0 * hf);
  path.lineTo(x + 9.0 * xf,y);
  path.lineTo(x + 11.0 * xf,y);
  path.lineTo(x + 5.0 * xf,y + 12.0 * hf);
  path.closePath();
  return path;
}

------------------------------------------------------------------------------------------------------------------------------------------------------
partially memorized
prediction:
returns the code attribute code .
ground truth
create the code attribute .

snippet
public CodeAttribute createCode(){
  CodeAttribute code=new CodeAttribute();
  for (int i=0; i < _attributes.size(); i++) {
    Attribute attr=_attributes.get(i);
    if (attr instanceof CodeAttribute)     return (CodeAttribute)attr;
  }
  return null;
}

------------------------------------------------------------------------------------------------------------------------------------------------------
partially memorized
prediction:
convert a java . sql . date to a java . sql . date
ground truth
converts a date string into a java . sql . date

snippet
public static java.sql.Date toSqlDate(String date){
  java.util.Date newDate=toDate(date,"00:00:00");
  if (newDate != null) {
    return new java.sql.Date(newDate.getTime());
  }
 else {
    return null;
  }
}

------------------------------------------------------------------------------------------------------------------------------------------------------
partially memorized
prediction:
returns the maximum of the two values .
ground truth
compute the maximum of two values

snippet
public static double max(final double a,final double b){
  if (a > b) {
    return a;
  }
  if (a < b) {
    return b;
  }
  if (a != b) {
    return Double.NaN;
  }
  long bits=Double.doubleToRawLongBits(a);
  if (bits == 0x8000000000000000L) {
    return b;
  }
  return a;
}

------------------------------------------------------------------------------------------------------------------------------------------------------
not memorized
prediction:
this method is called when the scheduler is started . it is called when the scheduler is started . if the scheduler is started , the scheduler is started , and the scheduler is started . if the scheduler is started , the scheduler is started , the scheduler is started , and the scheduler is started . if the scheduler is started , the scheduler is started , the scheduler is started , the scheduler is started , and the scheduler is started , the scheduler is started . if the scheduler is started , the scheduler is started , the scheduler is started , the scheduler is started , the scheduler is started , and the scheduler is started , the scheduler is started
ground truth
invoke the onscheduler ( ) in ischeduler directly as a library

snippet
public boolean onScheduleAsLibrary(Config config,Config runtime,IScheduler scheduler,PackingPlan packing){
  boolean ret=false;
  try {
    scheduler.initialize(config,runtime);
    ret=scheduler.onSchedule(packing);
    if (ret) {
      ret=SchedulerUtils.setLibSchedulerLocation(runtime,scheduler,false);
    }
 else {
      LOG.severe("Failed to invoke IScheduler as library");
    }
  }
  finally {
    scheduler.close();
  }
  return ret;
}

------------------------------------------------------------------------------------------------------------------------------------------------------
not memorized
prediction:
determines whether the given component is an array of characters . if the component is an array of characters , this method returns true if the component is an array of characters . if the component is an array of characters , this method returns false if the component is an array of characters . if the component is an array of characters , this method returns true if the component is an array of characters . if the component is an array of characters , this method returns true if the component is an array of characters , this method returns false if the component is an array of characters . this method returns true if the component is an array of characters
ground truth
validate the uri characters within a specific component . the component must be performed after escape encoding . or it doesn ' t include escaped characters . < p > it ' s not that much strict , generous . the strict validation might be performed before being called this method .

snippet
protected boolean validate(final char[] component,final int soffset,int eoffset,final BitSet generous){
  if (eoffset == -1) {
    eoffset=component.length - 1;
  }
  for (int i=soffset; i <= eoffset; i++) {
    if (!generous.get(component[i])) {
      return false;
    }
  }
  return true;
}

------------------------------------------------------------------------------------------------------------------------------------------------------
not memorized
prediction:
returns the enum class for the specified enum , if present , otherwise null .
ground truth
returns first enum constant found in at space - separated list of style names .

snippet
@SuppressWarnings("unchecked") public static <E extends Enum<? extends Style.HasCssName>>E fromStyleName(final String styleName,final Class<E> enumClass,final E defaultValue){
  if (styleName == null || enumClass == null) {
    return defaultValue;
  }
  for (  final Enum<? extends Style.HasCssName> constant : enumClass.getEnumConstants()) {
    final Style.HasCssName anEnum=(Style.HasCssName)constant;
    final String cssClass=anEnum.getCssName();
    if (cssClass != null && StyleHelper.containsStyle(styleName,cssClass)) {
      return (E)anEnum;
    }
  }
  return defaultValue;
}

------------------------------------------------------------------------------------------------------------------------------------------------------
not memorized
prediction:
copy the contents of the given inputstream to the given outputstream . closes the outputstream when done .
ground truth
copy a input resource to a output resource

snippet
public static void copy(InputStream is,Resource out,boolean closeIS) throws IOException {
  OutputStream os=null;
  try {
    os=toBufferedOutputStream(out.getOutputStream());
  }
 catch (  IOException ioe) {
    IOUtil.closeEL(os);
    throw ioe;
  }
  copy(is,os,closeIS,true);
}

------------------------------------------------------------------------------------------------------------------------------------------------------
not memorized
prediction:
add a method to the list of parameters .
ground truth
adds an array of parameters to be used in the post request body . logs a warning if the parameters argument is null .

snippet
public void addParameters(final NameValuePair[] parameters){
  LOG.trace("enter PostMethod.addParameters(NameValuePair[])");
  if (parameters == null) {
    LOG.warn("Attempt to addParameters(null) ignored");
  }
 else {
    super.clearRequestBody();
    for (int i=0; i < parameters.length; i++) {
      params.add(parameters[i]);
    }
  }
}

------------------------------------------------------------------------------------------------------------------------------------------------------
not memorized
prediction:
opens a file into a byte array . this method will block until the file is open , an i / o error occurs , or the i / o error occurs , or the end of the file is reached . < p / > this method will block until the file is open , an i / o error occurs , or the i / o error occurs , or the i / o error occurs , or the end of the file is reached . < p / > this method will block until the file is open , an i / o error occurs , or the i / o error occurs , or the end of the file is reached .
ground truth
opens a stream to an entry in the jar .

snippet
public ZipStreamImpl openReadImpl(PathImpl path) throws IOException {
  String pathName=path.getPath();
  return openReadImpl(pathName);
}

------------------------------------------------------------------------------------------------------------------------------------------------------
not memorized
prediction:
paint the background of the button using the specified colors .
ground truth
paint the arrow in enabled state .

snippet
private void paintForegroundEnabled(Graphics2D g,int width,int height){
  Shape s=decodeArrowPath(width,height);
  g.setPaint(enabledColor);
  g.fill(s);
}

------------------------------------------------------------------------------------------------------------------------------------------------------
not memorized
prediction:
calculates the alpha value of a given extreme model .
ground truth
returns the type of the extremum at the specified alpha values .

snippet
private ExtremumType extremumType(int n,double[] alpha_extreme,HyperBoundingBox interval){
  if (n == alpha_extreme.length - 1) {
    return extremumType;
  }
  double[] alpha_extreme_l=new double[alpha_extreme.length];
  double[] alpha_extreme_r=new double[alpha_extreme.length];
  double[] alpha_extreme_c=new double[alpha_extreme.length];
  System.arraycopy(alpha_extreme,0,alpha_extreme_l,0,alpha_extreme.length);
  System.arraycopy(alpha_extreme,0,alpha_extreme_r,0,alpha_extreme.length);
  System.arraycopy(alpha_extreme,0,alpha_extreme_c,0,alpha_extreme.length);
  double[] centroid=SpatialUtil.centroid(interval);
  for (int i=0; i < n; i++) {
    alpha_extreme_l[i]=centroid[i];
    alpha_extreme_r[i]=centroid[i];
    alpha_extreme_c[i]=centroid[i];
  }
  double intervalLength=interval.getMax(n) - interval.getMin(n);
  alpha_extreme_l[n]=Math.random() * intervalLength + interval.getMin(n);
  alpha_extreme_r[n]=Math.random() * intervalLength + interval.getMin(n);
  double f_c=function(alpha_extreme_c);
  double f_l=function(alpha_extreme_l);
  double f_r=function(alpha_extreme_r);
  if (f_l < f_c) {
    if (f_r < f_c || Math.abs(f_r - f_c) < DELTA) {
      return ExtremumType.MAXIMUM;
    }
  }
  if (f_r < f_c) {
    if (f_l < f_c || Math.abs(f_l - f_c) < DELTA) {
      return ExtremumType.MAXIMUM;
    }
  }
  if (f_l > f_c) {
    if (f_r > f_c || Math.abs(f_r - f_c) < DELTA) {
      return ExtremumType.MINIMUM;
    }
  }
  if (f_r > f_c) {
    if (f_l > f_c || Math.abs(f_l - f_c) < DELTA) {
      return ExtremumType.MINIMUM;
    }
  }
  if (Math.abs(f_l - f_c) < DELTA && Math.abs(f_r - f_c) < DELTA) {
    return ExtremumType.CONSTANT;
  }
  throw new IllegalArgumentException("Houston, we have a problem!\n" + this + "\n"+ "f_l "+ f_l+ "\n"+ "f_c "+ f_c+ "\n"+ "f_r "+ f_r+ "\n"+ "p "+ vec.toArray()+ "\n"+ "alpha   "+ FormatUtil.format(alpha_extreme_c)+ "\n"+ "alpha_l "+ FormatUtil.format(alpha_extreme_l)+ "\n"+ "alpha_r "+ FormatUtil.format(alpha_extreme_r)+ "\n"+ "n "+ n);
}

------------------------------------------------------------------------------------------------------------------------------------------------------
not memorized
prediction:
draws an arc at ( x , y ) , from ( x , y ) , to ( x , y ) , from ( x , y ) , to ( x , y ) , to ( x , y ) , to ( x , y ) , to ( x , y ) , to ( x , y ) , to ( x , y ) , to ( x , y ) , to ( x , y ) , to ( x , y ) , to ( x , y ) , to ( x , y ) , to ( x , y ) , to ( x , y ) , to ( x
ground truth
draws a rectangle of given half width and half height , centered on ( x , y ) .

snippet
public void rectangle(double x,double y,double halfWidth,double halfHeight){
  if (halfWidth < 0)   throw new IllegalArgumentException("half width can't be negative");
  if (halfHeight < 0)   throw new IllegalArgumentException("half height can't be negative");
  double xs=scaleX(x);
  double ys=scaleY(y);
  double ws=factorX(2 * halfWidth);
  double hs=factorY(2 * halfHeight);
  if (ws <= 1 && hs <= 1)   pixel(x,y);
 else   offscreen.draw(new Rectangle2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));
  draw();
}

------------------------------------------------------------------------------------------------------------------------------------------------------
